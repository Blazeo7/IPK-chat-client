using ClientServer.Messages;

namespace ClientServerTests;

public class UdpMessageCoding {
  public static IEnumerable<object[]> TestDataUdp() {
    // @formatter:off
    yield return [new AuthMessage("name", "pass", "alias", 1), 
                  new byte[] {0x2, 0x1, 0x0, 0x6E, 0x61, 0x6D, 0x65, 0x0, 0x70, 0x61, 0x73, 0x73,0x0, 0x61, 0x6C, 0x69, 0x61, 0x73, 0x0}];
    yield return [new JoinMessage("general", "alias", 2),
                  new byte[] {0x3, 0x2, 0x0, 0x67, 0x65, 0x6E, 0x65, 0x72, 0x61, 0x6C, 0x0,0x61, 0x6C, 0x69, 0x61, 0x73, 0x0}];
    yield return [new ByeMessage(3), 
                  new byte[] { 0xFF, 0x3, 0x0 }];
    yield return [new TextMessage(displayName: "alias", content: "test message", id: 4),
                  new byte[] {0x4, 0x4, 0x0, 0x61, 0x6C, 0x69, 0x61, 0x73, 0x0, 0x74, 0x65, 0x73,0x74, 0x20, 0x6D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x0}];
    yield return [new ErrorMessage(displayName: "alias", content: "test message", id: 5),
                  new byte[] {0xFE, 0x5, 0x0, 0x61, 0x6C, 0x69, 0x61, 0x73, 0x0, 0x74, 0x65, 0x73, 0x74, 0x20,0x6D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x0}];
    yield return [new ConfirmMessage(256), 
                  new byte[] { 0x0, 0x0, 0x1 }];
    // @formatter:on
  }

  [Theory]
  [MemberData(nameof(TestDataUdp))]
  public void ToUdpFormat_ShouldReturnCorrectString(Message message, byte[] expected) {
    // Arrange & Act
    byte[] result = message.ToUdpFormat();

    // Assert
    Assert.Equal(expected, result);
  }

    // @formatter:off
  [Theory]
  [InlineData(new byte[] {0x4, 0x4, 0x0, 0x61, 0x6C, 0x69, 0x61, 0x73, 0x0, 0x74, 0x65, 0x73,0x74, 0x20, 0x6D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x0, 0x0}, 
    typeof(TextMessage))]
  [InlineData(new byte[] { 0x1, 0x8, 0x0, 0x1, 0x12, 0x0, 0x74, 0x65, 0x73, 0x74 },
    typeof(ReplyMessage))]
  [InlineData(new byte[] { 0x1, 0x8, 0x0, 0x0, 0x12, 0x0, 0x74, 0x65, 0x73, 0x74 },
    typeof(ReplyMessage))]
  [InlineData(new byte[] {0xFE, 0x5, 0x0, 0x61, 0x6C, 0x69, 0x61, 0x73, 0x0, 0x74, 0x65, 0x73, 0x74, 0x20,0x6D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x0, 0x0}, 
    typeof(ErrorMessage))]
  [InlineData(new byte[] { 0xFF, 0x3, 0x0 }, 
    typeof(ByeMessage))]
  // @formatter:on
  public void FromUdpFormat_ShouldReturnCorrectMessageType(byte[] udpMessage, Type expectedType) {
    // Act
    Message result = Message.FromUdpFormat(udpMessage);

    // Assert
    Assert.IsType(expectedType, result);
  }
}